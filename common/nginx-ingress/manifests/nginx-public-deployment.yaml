---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-public-controller
  namespace: ingress-nginx
  labels:
    app.kubernetes.io/name: nginx-public
    app.kubernetes.io/instance: nginx-public
    app.kubernetes.io/component: controller
    app.kubernetes.io/managed-by: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nginx-public
      app.kubernetes.io/instance: nginx-public
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nginx-public
        app.kubernetes.io/instance: nginx-public
        app.kubernetes.io/component: controller
        app.kubernetes.io/managed-by: argocd
    spec:
      serviceAccountName: nginx-public
      containers:
        - name: controller
          image: registry.k8s.io/ingress-nginx/controller:v1.13.0
          imagePullPolicy: IfNotPresent
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/nginx-public-controller
            - --election-id=ingress-nginx-public-leader
            - --controller-class=k8s.io/ingress-nginx-public
            - --ingress-class=nginx-public
            - --watch-ingress-without-class=false
          env:
            - name: POD_NAMESPACE
              valueFrom: {fieldRef: {fieldPath: metadata.namespace}}
            - name: POD_NAME
              valueFrom: {fieldRef: {fieldPath: metadata.name}}
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            httpGet: {path: /healthz, port: 10254}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet: {path: /healthz, port: 10254}
            initialDelaySeconds: 10
            periodSeconds: 10
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {add: [NET_BIND_SERVICE], drop: [ALL]}
            runAsUser: 101
            runAsGroup: 82
            runAsNonRoot: true
            seccompProfile: {type: RuntimeDefault}
      nodeSelector:
        kubernetes.io/os: linux
      terminationGracePeriodSeconds: 300
